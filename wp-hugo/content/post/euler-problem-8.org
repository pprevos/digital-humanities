#+title: Euler Problem 8: Largest Product in a Series
#+date: 2017-01-18 11:00:00
#+lastmod: 2020-07-18
#+categories[]: The-Devil-is-in-the-Data
#+tags[]: Project-Euler-Solutions-in-R R-Language
#+draft: true

[[https://projecteuler.net/problem=8][Euler Problem 8]] combines
mathematics with text analysis. Just like problem 11, it asks for the
[[https://lucidmanager.org/euler-problem-11/][largest product]].

The problem is defined as follows:

The four adjacent digits in the 1,000-digit number below that have the
greatest product are $latex 9 \times 9 \times 8 \times 9 = 5832$.

=73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450=

Find the [[https://projecteuler.net/problem=8][thirteen adjacent
digits]] in the 1,000-digit number that have the greatest product. What
is the value of this product?

** Euler Problem 8 Proposed Solution
   :PROPERTIES:
   :CUSTOM_ID: euler-problem-8-proposed-solution
   :END:

The first step is to define the digits as a character string. The answer
is found by cycling through all 13-character
[[https://en.wikipedia.org/wiki/N-gram][n-grams]] to find the highest
product using the
[[https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/prod][prod]]
function. You can download the most recent version of this code from
[[https://github.com/pprevos/ProjectEuler/blob/master/solutions/problem008.R][GitHub]].

#+BEGIN_EXAMPLE
  # Define digits
  digits <- "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
  ngram <- 13 # Define length
  answer <- 0
  # Clycle through digits
      for (i in 1:(nchar(digits) - ngram + 1)) {
      # Pick 13 consecutive digits
      adjecent <- substr(digits, i, i + ngram - 1)
      # Define product
      mult <- prod(as.numeric(unlist(strsplit(adjecent, "")))) # Largest? 
      if (mult > answer)
          answer <- mult
  }
#+END_EXAMPLE
