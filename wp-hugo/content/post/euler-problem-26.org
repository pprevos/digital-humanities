#+title: The Viral Recurring Decimal: Euler Problem 26
#+date: 2017-06-29 10:00:00
#+lastmod: 2020-07-18
#+categories[]: The-Devil-is-in-the-Data
#+tags[]: Numberphile Project-Euler-Solutions-in-R R-Language
#+draft: true

A few years ago a fraction broke the internet. What happens when you
divide 1 by 998001?

$latex \frac{1}{998001} =
0.000001002003004005006007008009010011012013014015 \ldots $

What is special about this fraction is that it lists every three-decimal
number except for 998. Look carefully at the sequence to see that is
000, 001, 0002, 003, 004, 005 and so on. After it has reached 999, the
sequence continues from the start. This fraction thus has 2997 recurring
decimals. James Grime from [[http://www.numberphile.com/][Numberphile]]
explains this mathematical oddity with his usual enthusiasm.

{{< youtube "daro6K6mym8" >}}

998,001 an its mysterious recurring decimals - Numberphile.

The decimal fraction of 1/998001 is a
[[https://en.wikipedia.org/wiki/Repeating_decimal][recurring decimal]].
These are decimal numbers with periodic digits (repeating its values at
regular intervals). Euler problem 26 asks us to analyse recurring
decimals (reciprocal cycles). This Euler Problem also looks at fractions
and [[https://lucidmanager.org/euler-problem-33-ford-circles/][Ford
Circles]].

** Euler Problem 26 Definition
   :PROPERTIES:
   :CUSTOM_ID: euler-problem-26-definition
   :END:

A unit fraction contains 1 in the numerator. The decimal representation
of the unit fractions with denominators 2 to 10 are given:\\
$latex 1/2 = 0.5 $\\
$latex 1/3 = 0.(3) $\\
$latex 1/4 = 0.25 $\\
$latex 1/5 = 0.2 $\\
$latex 1/6 = 0.1(6) $\\
$latex 1/7 = 0.(142857) $\\
$latex 1/8 = 0.125 $\\
$latex 1/9 = 0.(1) $\\
$latex 1/10 = 0.1 $

Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It
can be seen that 1/7 has a 6-digit recurring cycle. Find the value of d
< 1000 for which 1/d contains the longest recurring cycle in its decimal
fraction part.

** Solution
   :PROPERTIES:
   :CUSTOM_ID: solution
   :END:

[[https://oeis.org/A051626][A051626]] describes the length of the
recurring numbers in 1/n in the /On-Line Encyclopaedia of Integer
Sequences/. To solve Euler Problem 26, we need to generate the first
1000 numbers of this sequence and find out which number has the longest
recurring cycle.

R can only display up to 22 decimals by using =options(digits=22)=. The
base R capability is unsuitable for solving this problem, so I wrote
some code to perform long division the old-fashioned way.

The =recur= function divides 1 by any arbitrary integer. The code
continues until the decimal terminates, for example 1/4 = 0.25, or when
a recurring pattern emerges, e.g. 1/7 = 0.(142857).

The function has two arguments: =n= is the input number. The =output=
argument determines the outcome of the function: "len" for the length of
the recurring decimals. Any other value shows the result of the
calculation. The output of the function is a string. Using the European
notation, the recurring part of the decimals is shown between brackets,
e.g. 1/14 = 0.0(714285).

You can view the code below or download the latest version from
[[https://github.com/pprevos/ProjectEuler/blob/master/solutions/problem026.R][GitHub]].

#+BEGIN_EXAMPLE
  recur <- function(x, output = "") {
      # Prepare variable
      if (x == 0) return(NaN)
      if (x == 1) return(0)
      x <- floor(abs(x))
      # Initiate vectors to store decimals and remainders
      dec <- vector()
      rem <- vector()
      # Initiate values
      i <- 1
      r <- 10
      rem <- r
      # Long division
      repeat {
          dec[i] <- floor(r / x)
          r <- 10 * (r %% x)
          # Test wether the number is terminating or repeating
          if (r == 0 | r %in% rem) break
          rem[i + 1] <- r
          i <- i + 1 
      }
      # Determine number of recurring digits
      rep <- ifelse(r != 0, length(rem) - which(r == rem) + 1, 0)
      # Output
      if (output == "len")
          return(rep)
      else {
          if (rep != 0) {
              if (rep == length(dec)) 
                  l <- "("
              else
                  l <- c(dec[1:(length(dec) - rep)], "(")
              dec <- c(l, dec[(length(dec) - rep + 1):length(dec)], ")")
          }
          return(paste0("0.", paste0(dec, collapse = "", sep = "")))
          }
  }

  A051626 <- sapply(1:1000, recur, "len")
  answer <- which.max(A051626)
  print(answer)

  recur(998001, "len")
  recur(998001)
#+END_EXAMPLE
