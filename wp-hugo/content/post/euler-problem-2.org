#+title: Euler Problem 2: Even Fibonacci Numbers | Solutions in R
#+date: 2016-12-07 11:00:00
#+lastmod: 2020-07-18
#+categories[]: The-Devil-is-in-the-Data
#+tags[]: Numberphile Project-Euler-Solutions-in-R R-Language
#+draft: true

Euler Problem 2 looks at Fibonacci numbers. This number sequence
describes many natural processes, such as the patterns in this beautiful
sunflower. The seeds inside the sunflower grow in a spiral pattern and
the number of spirals tends to be a Fibonacci number. This pattern is
the most efficient way to pack the centre with as many seeds as
possible.

Famous mathematician and father of computer science Alan Turing was
fascinated by this problem until his death. In 2016, the Royal Society
published a journal article that builds on his work in the
[[http://dx.doi.org/10.1098/rsos.160091][Open Science]] journal. They
collected sunflowers from citizen scientists from around the world and
confirmed that for the majority of sunflowers, the number of spirals is
a Fibonacci number. They did, however, also discover other patterns.
Euler Problem 2 is a bit less poetic as it only asks to generate and sum
even numbers.

{{< youtube "DRjFV_DETKQ" >}}

** Euler Problem 2 Definition
   :PROPERTIES:
   :CUSTOM_ID: euler-problem-2-definition
   :END:

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be:

$latex 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \ldots$

By considering the terms in the
[[https://projecteuler.net/problem=2][Fibonacci sequence whose values do
not exceed four million]], find the sum of the even-valued terms.

** Solution
   :PROPERTIES:
   :CUSTOM_ID: solution
   :END:

The code generates
[[https://en.wikipedia.org/wiki/Fibonacci_number][Fibonacci
numbers]] until it reaches the value of four million. The code then sums
the even numbers in the sequence.

#+BEGIN_EXAMPLE
  fib <- c(1, 2)  #Define first two numbers
  while (max(fib) <= 4E+06) {
      # Generate Fibonacci numbers until limit is reached
      len <- length(fib)
      fib <- c(fib, fib[len - 1] + fib[len])
  }
  answer <- sum(fib[fib %% 2 == 0])
  print(answer)
#+END_EXAMPLE

A series of R packages exist to generate Fibonacci numbers.
The [[https://cran.r-project.org/web/packages/gmp/index.html][GMP
package]] for Multiple Precision Arithmetic provides a function to
calculate the n^{th} Fibonacci number. This package is also able to work
with huge numbers. Using this package is much faster than the base R
code used above. This most recent version of this code is available on
[[https://github.com/pprevos/ProjectEuler/blob/master/solutions/problem002.R][GitHub]].
Interestingly, the
[[https://gmplib.org/manual/Fibonacci-Numbers-Algorithm.html][GMP
library]] uses tables for Fibonacci numbers up to twelve quintillion
($latex 10^{18}$).

#+BEGIN_EXAMPLE
  library(gmp)
  i <- 1
  answer <- 0
  fib <- fibnum(1)
  while (fibnum(i) <= 4E6) {
      fib <- fibnum(i)
      if (fib %% 2 == 0)
          answer <- answer + fib
      i <- i + 1
  }
  print(answer)
#+END_EXAMPLE

[[https://lucidmanager.org/euler-problem-25/][Euler Problem 25]] also
deals with Fibonacci numbers and asks to find the first such number with
1000 digits.
