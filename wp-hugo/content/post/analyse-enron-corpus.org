#+title: Using the iGraph package to Analyse the Enron Corpus
#+date: 2017-07-13 10:00:00
#+lastmod: 2020-07-18
#+categories[]: The-Devil-is-in-the-Data
#+tags[]: Digital-Humanities Network-Analysis R-Language
#+draft: true

The Enron scandal is one of the most famous corporate governance
failures in the history of capitalism. The case itself is interesting
for its own sake, but in this post, I am more interested in one of the
data sets that the subsequent investigation has provided.

This blog post analyses an extensive collection of e-mails from former
Enron employees. The Enron corpus is analysed using network analysis
tools provided by the [[http://igraph.org/r/][iGraph package]]. Network
analysis is a versatile technique that can be used to add value to a lot
of different data sets, including the complex corporate relationships of
[[https://lucidmanager.org/trumpworld-analysis/][Donald Trump]].

{{< youtube "jrEf8uabe7E" >}}

** The Enron Corpus
   :PROPERTIES:
   :CUSTOM_ID: the-enron-corpus
   :END:

As part of their inquiries, The Federal Energy Regulatory Commission
used an extensive collection of emails from Enron employees. The Enron
corpus is one of the only publicly available collections of emails
available for research. This dataset also provides a fascinating
playground for citizen data scientists.

The set has privacy issues as it contains messages from living people.
When analysing this data set, we need to keep in mind that the majority
of former Enron employees were innocent people who lost their jobs due
to the greed of their overlords. The code in this post only analyses the
e-mail headers, ignoring the content.

#+CAPTION: Laid-off Enron employees outside Enron headquarters as the
company collapsed in 2001 (Source cnbc.com).
[[https://fm.cnbc.com/applications/cnbc.com/resources/img/editorial/2014/10/13/102082546-675237.530x298.jpg]]

The Enron Corpus is an extensive database of half a million emails
generated by more than 100 Enron employees. You can download the corpus
from the [[https://www.cs.cmu.edu/~./enron/][Carnegie Mellon School of
Computer Science]]. The first code snippet downloads the 7 May 2015
version of the dataset (about 423Mb, tarred and gzipped) and untars it
to your working directory. You can download the most recent version of
the code on
[[https://github.com/pprevos/r.prevos.net/blob/master/Miscellaneous/Enron.R][GitHub]].

#+BEGIN_EXAMPLE
  if (!file.exists("enron_mail_20150507.tgz")) {
      download.file("https://www.cs.cmu.edu/~./enron/enron_mail_20150507.tgz",
                     destfile = "enron_mail_20150507.tgz")
  }
  if (!file.exists("enron_mail_20150507.tgz")) {
      untar("enron_mail_20150507.tgz")
  }
#+END_EXAMPLE

** Preparing the Enron email
   :PROPERTIES:
   :CUSTOM_ID: preparing-the-enron-email
   :END:

The main folder is =maildir=, which holds all the personal accounts. Our
first task is to load the required libraries and create a list of
available emails. This code results in 517,401 e-mail files with 44,859
emails in the inboxes of users. The E-mail corpus consists of nested
folders per user with e-mails as text files.

#+BEGIN_EXAMPLE
  emails <- list.files("maildir/", full.names = TRUE, recursive = TRUE)
  emails <- emails[grep("/inbox", emails)]
#+END_EXAMPLE

The bulk of the code creates a list of emails between Enron employees.
The code performs a lot of string manipulations to extract the
information from the text files. The content of the e-mails is ignored,
the code only retrieves the sender and the receiver. The analysis is
limited to e-mails between employees in the corpus. Only those receivers
whose inbox forms part of the analysis are included. The result of this
code is a data frame with the usernames of the sender and receiver for
each email. The data frame contains 2779 emails that meet the criteria.

The code below looks extracts all internal emails in the Inox folders.
It then retrieves a lis of usernames from the e-mails. The data is
cleaned by removing users without sent e-mails, and emails which users
sent to themselves.

#+BEGIN_EXAMPLE
  inboxes <- data.frame(
      from = apply(as.data.frame(emails), 1, 
                 function(x){readLines(x, warn = FALSE)[3]}),
      to = emails,
      stringsAsFactors = FALSE
  )
  head(inboxes)

  ## Keep only enron.com and strip all but username
  library(stringr) # String manipulation
  inboxes <- inboxes[grepl("@enron.com", inboxes$from),]
  inboxes$from <- str_sub(inboxes$from, 7, nchar(inboxes$from) - 10)
  to <- str_split(inboxes$to, "/")
  inboxes$to <- sapply(to, "[", 7) # Number depends on foldder structure
  head(inboxes)

  ## Create list of usernames
  users <- data.frame(user = paste0("~/Desktop/maildir/", unique(inboxes$to)))

  ## Remove those without sent mails
  sent <- apply(users, 1, function(x) sum(grepl("sent", dir(x))))
  users <- subset(users, sent != 0)
  Replace username with e-mail name
  users$mailname <- NA
  for (i in 1:nrow(users)){
      sentmail <- dir(paste0(users$user[i], "/sent_items/"))
      name <- readLines(paste0(users$user[i], "/sent_items/", sentmail[1]), warn = F)[3]
      name <- str_sub(name, 7, nchar(name)-10)
      users$mailname[i] <- name
  }
  users$user <- str_sub(users$user, 19)
  inboxes <- merge(inboxes, by.x="to", users, by.y="user")
  inboxes <- data.frame(from = inboxes$from, to = inboxes$mailname)

  inboxes$from <- as.character(inboxes$from)
  inboxes$to <- as.character(inboxes$to)
  Only e-mails between inbox users

  inboxes <- inboxes[inboxes$from %in% inboxes$to,]

  ## Remove no.address
  inboxes <- subset(inboxes, from != "no.address" & to != "no.address")

  ## Remove emails to self
  inboxes <- subset(inboxes, inboxes$from != inboxes$to)
#+END_EXAMPLE

** Analyse the Enron Corpus
   :PROPERTIES:
   :CUSTOM_ID: analyse-the-enron-corpus
   :END:

The last code snippet defines a
[[https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)][graph]]
from the table of e-mails. Each employee is a node in the network, and
each e-mail is an edge (line). The iGraph package is a powerful tool to
analyse networks. The =graph_from_edgelist= function creates a network
object that can be analysed using the iGraph package. The graph is
directed because the information flows from the sender to the receiver.

In the next step, the Spingglass algorithm finds
[[https://en.wikipedia.org/wiki/Community_structure][community
structure]] within the data. A community is a group of nodes that are
more connected with each other than with any other node.

The last step visualises the network. The diagram is drawn using the
Fruchterman-Reingold algorithm, which places the most connected nodes at
the centre of the picture. The background colours in the diagram
indicate the eight communities.

The graph tells us a lot about the group of employees in the Enron
corpus and how they relate to each other. Each of the communities
represents a tightly connected group of employees that mainly e-mail
each other. Any connections between communities are shown in red. When
the =vertex.label = NA= line is removed, the usernames are displayed at
each node.

We can see groups that never email each other, lonely hangers-on and
tightly knit cliques within Enron. In the centre of the graph, we see a
few individuals who are connectors between groups because they send a
lot of emails to people outside their community. On the fringes of the
graph are the hangers-on who only once or twice emailed somebody in the
corpus but were still included in the investigation.

#+BEGIN_EXAMPLE
  library(igraph)
  g <- graph_from_edgelist(as.matrix(inboxes), directed = TRUE)
  coms <- spinglass.community(g)
  par(mar = c(0,0,2,0))
  plot(coms, g,
      vertex.label=NA,
      layout = layout.fruchterman.reingold,
      vertex.size = 3
  )
#+END_EXAMPLE

#+CAPTION: Enron email corpus network with communities.
[[/images/blogs.dir/4/files/sites/4/2017/07/enron-1024x1024.png]]

This analysis provides only a quick glimpse into the knowledge contained
in the Enron email corpus. An extensive range of tools is available to
analyse such networks. An interesting exercise would be to overlap this
network with the organisation chart to see the relationships between
teams. Have fun playing with this fantastic, but somewhat sensitive,
data set!
