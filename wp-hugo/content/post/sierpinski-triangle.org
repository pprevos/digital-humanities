#+title: The Sierpinski Triangle: Visualising infinity in R
#+date: 2017-05-25 10:00:00
#+lastmod: 2020-07-18
#+categories[]: The-Devil-is-in-the-Data
#+tags[]: Numberphile R-Language
#+draft: true

Wacław Sierpiński was a mathematical genius who developed several of the
earliest fractals. The Sierpiński triangle is an easy to conceptualise
geometrical figure but it hides a fascinating mathematical complexity.
Start by drawing an equilateral triangle and draw another one in its
centre. Then draw equilateral triangles in the four resulting
triangles, and so on, /ad infinitum/.

The original Sierpinski triangle will eventually disappear into
[[http://mathworld.wolfram.com/CantorDust.html][Cantor dust]], a cloud
of ever-shrinking triangles of infinitesimal size. The triangle is
self-similar, no matter how far you zoom in, the basic geometry remains
the same.

[[/images/blogs.dir/4/files/sites/4/2017/05/sierpinski.gif]]

** The Chaos Game
   :PROPERTIES:
   :CUSTOM_ID: the-chaos-game
   :END:

A fascinating method to create a Sierpinski Triangle is a
[[https://en.wikipedia.org/wiki/Chaos_game][chaos game]]. This method
uses random numbers and some simple arithmetic rules.
Sierpinski Triangles can be created using the following six steps:

1. Define three points in a plane to form a triangle.
2. Randomly select any point on the plane.
3. Randomly select any one of the three triangle points.
4. Move half the distance from your current position to the selected
   vertex.
5. Plot the current position.
6. Repeat from step 3.

This fractal is an implementation of chaos theory as this random process
attracts to a complex ordered geometry. The game only works with random
numbers and when selecting random vertices of the triangle.

{{< youtube "kbKtFN71Lfs" >}}

** Sierpinski Triangle Code
   :PROPERTIES:
   :CUSTOM_ID: sierpinski-triangle-code
   :END:

This code implements the six rules in R. The code first initialises the
triangle, defines a random starting point and then runs a loop to place
random dots. The R plot engine does not draw pixels but uses characters,
which implies that the diagram is not as accurate as it could be but the
general principle is clear. The =x11()= and =Sys.sleep()= commands are
used to plot during the for-loop.

This algorithm demonstrates how a seemingly chaotic process can result
in order. Many other versions of
[[https://en.wikipedia.org/wiki/Chaos_game][chaos games]] exist, which I
leave to the reader to play with. If you create your own versions then
please share the code in the comment box below.

If you are interested in visualising mathematical oddities then feel
free to read my article about the
[[https://lucidmanager.org/plotting-mobius-strip/][Möbius strip and
Klein Bottle]].

View the code below or download the latest version from
[[https://github.com/pprevos/r.prevos.net/blob/master/Miscellaneous/Mathematics/sierpinsky.R][GitHub]].

#+BEGIN_EXAMPLE
  p <- c(0, 500, 1000)
  q <- c(0, 1000, 0)
  x11()
  par(mar = rep(0, 4))
  plot(p, q, col= "red", pch = 15, cex = 1, axes = FALSE)
  Random starting point

  x <- sample(0:1000, 1)
  y <- sample(0:1000, 1)

  for (i in 1:10000) {
      Sys.sleep(.001)
      n <- sample(1:3, 1)
      x <- floor(x + (p[n] - x) / 2)
      y <- floor(y + (q[n] - y) / 2)
      points(x, y, pch = 15, cex = 0.5)
  }
#+END_EXAMPLE
