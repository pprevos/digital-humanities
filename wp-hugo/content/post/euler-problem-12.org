#+title: Euler Problem 12: Highly Divisible Triangular Number
#+date: 2017-02-15 11:00:00
#+lastmod: 2020-07-18
#+categories[]: The-Devil-is-in-the-Data
#+tags[]: Project-Euler-Solutions-in-R R-Language
#+draft: true

Euler Problem 12 takes us to the realm of
[[https://en.wikipedia.org/wiki/Triangular_number][triangular numbers]]
and [[https://en.wikipedia.org/wiki/Divisor][proper divisors]]. The
image below shows a hands-on method to visualise the number of divisors
of ten. [[https://en.wikipedia.org/wiki/Cuisenaire_rods][Cuisenaire
rods]] are learning aids to explore mathematics. Each of the coloured
rods has a different integer length, which allows students to explore
basic arithmetic. In this article, I discuss a method to generate
triangular numbers using the R language.

#+CAPTION: The divisors of 10 illustrated with Cuisenaire rods: 1, 2, 5,
and 10 (Wikipedia).
[[https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Cuisenaire_ten.JPG/1200px-Cuisenaire_ten.JPG]]

** Euler Problem 12 Definition
   :PROPERTIES:
   :CUSTOM_ID: euler-problem-12-definition
   :END:

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7^{th} triangle number would be $latex 1 + 2 + 3 + 4 + 5
+ 6 + 7 = 28$. The first ten terms would be: $latex 1, 3, 6, 10, 15, 21,
28, 36, 45, 55, \ldots$ Let us list the factors of the first seven
triangle numbers:

*1*: 1

*3*: 1, 3

*6*: 1, 2, 3, 6

*10*: 1, 2, 5, 10

*15*: 1, 3, 5, 15

*21*: 1, 3, 7 ,21

*28*: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five
divisors. What is the value of
[[https://projecteuler.net/problem=12][the first triangle number]] to
have over five hundred divisors?

** Solution
   :PROPERTIES:
   :CUSTOM_ID: solution
   :END:

In the video below, Vishal Kataria explains a simple method to determine
the number of divisors using prime factorization. The prime
factorization of $latex n$ is given by:

$latex n = p^{\alpha_1}_1 \times p^{\alpha_2}_2 \times p^{\alpha_k}_k$

The number of proper divisors is:

$latex d = (\alpha_1 + 1) (\alpha_2 + 1) \ldots (\alpha_k + 1)$

{{< youtube "jXRHfgqE1qY" >}}

The code reuses the prime factorisation function developed for
[[https://lucidmanager.org/euler-problem-3/][Euler Problem 3]]. This
function results in a vector of all prime factors, e.g. the prime
factors of 28 are 2, 2 and 7.

The code to solve this problem determines the values for alpha using the
[[https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/rle][run
length function]]. This function counts the number of times each element
in a sequence is repeated. The outcome of this function is a vector of
the values and the number of times each is repeated. The prime factors
of 28 are 2 and 7, and their run lengths are 2 and 1. The number of
divisors can now be determined.

$latex 28 = 2^2 \times 7^1$

$latex d = (2+1)(1+1) = 6$

The code to solve Euler Problem 12 is shown below. The loop continues
until it finds a triangular number with 500 divisors. The first two
lines increment the index and create the next triangular number. The
third line in the loop determines the number of times each factor is
repeated (the run lengths). The last line calculates the number of
divisors using the formula mentioned above. View the code below or
download the latest version from
[[https://github.com/pprevos/ProjectEuler/blob/master/solutions/problem012.R][GitHub]].

#+BEGIN_EXAMPLE
  i <- 0
  divisors <- 0
  while (divisors < 500) {
      i <- i + 1
      triangle <- (i * (i + 1)) / 2
      pf <- prime.factors(triangle)
      alpha <- rle(pf)
      divisors <- prod(alpha$lengths + 1)
  }
  answer <- triangle
  print(answer)
#+END_EXAMPLE
