#+title: How Virtual Tags have transformed SCADA data analysis
#+date: 2017-07-27 10:00:00
#+lastmod: 2020-07-18
#+categories[]: The-Devil-is-in-the-Data
#+tags[]: Hydroinformatics R-Language
#+draft: true

Yesterday, I delivered the International Keynote at
the [[https://www.conferenz.co.nz/events/asset-data-insights-conference][Asset
Data & Insights Conference]] in Auckland, New Zealand (the place where R
was originally developed). My talk was about how to create value from
SCADA data, using a method I developed with my colleagues
called /Virtual Tags/. My talk started with my views on data science
strategy, which I also presented to the
[[https://lucidmanager.org/strategic-data-science/][R User Group]] in
Melbourne. In this post, I like to explain what Virtual Tags are, and
how they can be used to improve the value of
[[http://awa.asn.au/AWA_MBRR/Publications/Latest_News/Water_utilities_ready_for_next_wave_of_SCADA_data_analysis.aspx][SCADA
data]].

** SCADA Systems at Water Treatment Plants
   :PROPERTIES:
   :CUSTOM_ID: scada-systems-at-water-treatment-plants
   :END:

Water treatment plants are mostly fully automated systems, using
analysers and the SCADA system to communicate this data. For those of
you not familiar with water treatment plants, this video below gives a
cute summary of the process.

{{< youtube "rj44AkHmVCo" >}}

Water Treatment SCADA explanation.

Water treatment plants need sensors to measure a broad range of
parameters. These instruments record data 24 hours per day to control
operations. When the process operates effectively, all values fall
within a very narrow band. All these values are stored by the SCADA
system for typically a year, after which they are destroyed to save
storage space.

Water treatment plants measure
[[https://en.wikipedia.org/wiki/Turbidity][turbidity]] (clarity of the
water) to assess the effectiveness of filtration. The code snippet below
simulates the measurements from a turbidity instrument at a water
treatment plant over five hours. The code simulates measurements from a
turbidity instrument at a water treatment plant over a period of five
hours. Most water quality data has a log-normal distribution with a
narrow standard deviation. You can download the latest version of this
code on
[[https://github.com/pprevos/hydroinformatics/blob/master/SCADA/virtual_tags.R][GitHub]].

#+BEGIN_EXAMPLE
  set.seed(1234)
  n <- 300
  wtp <- data.frame(DateTime = seq.POSIXt(ISOdate(1910, 1, 1), length.out = n, by = 60),
                    WTP = rlnorm(n, log(.1), .01))
  library(ggplot2)
  p <- ggplot(wtp, aes(x = DateTime, y = WTP)) + 
           geom_line(colour = "grey") +
           ylim(0.09, 0.11) + 
           ylab(&quot;Turbidity&quot;) + 
           ggtitle("Turbidity simulation")
  p
  [/code]
#+END_EXAMPLE

[[/images/blogs.dir/4/files/sites/4/2017/07/Turbidity.png]]

** SCADA Historian
   :PROPERTIES:
   :CUSTOM_ID: scada-historian
   :END:

The data generated by the SCADA system is used to take operational
decisions. The data is created and structured to make decisions in the
present, not to solve problems in the future. SCADA Historian systems
archive this information for future analysis. Historian systems only
store new values when the new reading is more or less than a certain
percentage than the previous one. This method saves storage space
without sacrificing much accuracy.

For example, when an instrument reads 0.20 and the limit is set at 5%,
new values are only recorded when they are below 0.19 or above 0.21. Any
further values are stored when they deviate 5% from the new value, and
so on. The code snippet below simulates this behaviour, based on the
simulated turbidity readings generated earlier. This Historian only
stores the data points marked in black.

#+BEGIN_EXAMPLE
  threshold <- 0.03
  h <- 1 # First historised point

  wtp$historise <- FALSE
  wtp$historise[c(1, n)] <- TRUE # Testing for delta > threshold
  for (i in 2:nrow(wtp)) {
      delta <- wtp$WTP[i] / wtp$WTP[h] 
      if (delta > (1 + threshold) | delta < (1 - threshold)) {
          wtp$historise[i] <- TRUE
          h <- i
      }
  }
  historian <- subset(wtp, historise == TRUE)
  historian$Source <- "Historian"
  p <- p + geom_point(data = historian, aes(x = DateTime, y = WTP)) +
               ggtitle("Historised data")
  p
#+END_EXAMPLE

[[/images/blogs.dir/4/files/sites/4/2017/07/Historian.png]]

** Virtual Tags
   :PROPERTIES:
   :CUSTOM_ID: virtual-tags
   :END:

This standard method to generate and store SCADA data works fine to
operate systems but does not work so well when using the data for
posthoc analysis. The data in Historian is an unequally-spaced time
series which makes it harder to analyse the data. The Virtual Tag
approach expands these unequal time series to an equally-spaced one,
using constant interpolation.\\
The =vt= function undertakes the constant interpolation using the
[[http://astrostatistics.psu.edu/su07/R/html/stats/html/approxfun.html][approx
function]]. The function =vt= is applied to all the DateTime values,
using the historised data points. The red line shows how the value is
constant until it jumps by more than 5%. This example demonstrates that
we have a steady process with some minor spikes, which is the expected
outcome of this simulation.

#+BEGIN_EXAMPLE
  vt <- function(t) approx(historian$DateTime, historian$WTP, xout = t, method = "constant")
  turbidity <- lapply(as.data.frame(wtp$DateTime), vt)
  wtp$VirtualTag <- turbidity[[1]]$y
  p + geom_line(data = wtp, aes(x = DateTime, y = VirtualTag), 
                colour = "red") +
  ggtitle("Virtual Tags")
  p
#+END_EXAMPLE

[[/images/blogs.dir/4/files/sites/4/2017/07/VirtualTags.png]]

The next step in Virtual Tags is to combine the tags from different data
points. For example, we are only interested in the turbidity readings
when the filter was running. We can do this by combining this data with
a valve status or flow in the filter.

This approach might seem cumbersome but it simplifies analysing data
from Historian. Virtual Tags enables several analytical processes that
would otherwise be hard to. This system also adds context to the SCADA
information by linking tags to each other and the processes they
describe. If you are interested in more detail, then please download
the [[http://colibanwater.github.io/HBT/][technical manual]] for Virtual
Tags and how they are implemented in SQL.

If you like to learn more about using R code to solve water problems,
then look at the online course R for Water Professionals.

#+CAPTION: *LEARN MORE ABOUT R FOR WATER PROFESSIONALS HERE!*
[[/images/blogs.dir/9/files/sites/9/2019/11/9-1024x512.png]]
